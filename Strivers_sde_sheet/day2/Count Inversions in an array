https://takeuforward.org/data-structure/count-inversions-in-an-array/

class Solution
{
    public static long merge(long[] arr, int low, int mid, int high){
        long count = 0;
        int left = low;
        int right = mid+1;
        List<Long> list = new ArrayList<>();

        while(left <= mid && right <= high){
            if(arr[left] <= arr[right]){
                list.add(arr[left]);
                left++;
            } else {
                list.add(arr[right]);
                count = count + (mid - left + 1);
                right++;
            }
        }

        while(left <= mid){
            list.add(arr[left]);
            left++;
        }

        while(right <= high){
            list.add(arr[right]);
            right++;
        }

        for(int i=low; i<=high; i++){
            arr[i] = list.get(i - low);
        }
        return count;
    }

    public static long mergeSort(long[] arr, int low, int high){
        if(low >= high){
            return 0;
        }
        long count = 0;
        int mid = (low + high)/2;
        count += mergeSort(arr, low, mid);
        count += mergeSort(arr, mid+1, high);
        count += merge(arr, low, mid, high);
        return count;
    }

    static long inversionCount(long arr[], long N)
    {
        return mergeSort(arr, 0, arr.length - 1);
    }
}

Time complexity: O(NlogN)
Space complexity: O(N)
