https://leetcode.com/problems/merge-intervals/

Optimal soln
-------------------------------------------------------------------------------
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length <= 1){
            return intervals;
        }

        Arrays.sort(intervals, (a,b) -> a[0] - b[0]);
        List<int[]> res = new ArrayList<>();

        int[] curr = intervals[0];
        int start = curr[0];
        int end = curr[1];

        for(int[] interval : intervals){
            if(interval[0] <= end){
                end = Math.max(end, interval[1]);
            }
            else{
                res.add(new int[]{start, end});
                start = interval[0];
                end = interval[1];
            }
        }

        res.add(new int[]{start, end});
        return res.toArray(new int[res.size()][]);
    }
}

Time complexity: O(NlogN) + O(N). O(NlogN) for sorting and O(N) for traversing through the array.
Space Complexity: O(N) to return the answer of the merged intervals.