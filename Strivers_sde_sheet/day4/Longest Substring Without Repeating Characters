https://leetcode.com/problems/longest-substring-without-repeating-characters/

Brute force
--------------------------------------------------------
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int count = 0;
        for(int i=0; i<s.length(); i++){
            int sum = 1;
            HashSet<Character> set = new HashSet<>();
            set.add(s.charAt(i));
            for(int j=i+1; j<s.length(); j++){
                if(set.contains(s.charAt(j))){
                    break;
                }
                sum++;
                set.add(s.charAt(j));
            }
            count = Math.max(count, sum);
        }

        return count;
    }
}

Time complexity : O(N*N)
space complexity: O(N)

----------------------------------------------------------------------------------
Optimal soln:

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        int n = s.length();
        int left = 0;
        int right = 0;
        int max = 0;

        while(right < n){
            if(map.containsKey(s.charAt(right))){
                left = Math.max(map.get(s.charAt(right)) + 1, left);
            }

            map.put(s.charAt(right), right);
            max = Math.max(max, right - left + 1);
            right++;
        }

        return max;
    }
}

Time complexity: O(N)
space complexity: O(N)
