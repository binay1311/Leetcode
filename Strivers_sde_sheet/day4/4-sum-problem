https://leetcode.com/problems/4sum/

Optimal soln:
--------------------------------------------------
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        int n = nums.length;
        if(nums == null || n == 0){
            return ans;
        }

        Arrays.sort(nums);

        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                int sum = target - nums[i] - nums[j];

                int front = j+1;
                int back = n-1;

                while(front < back){
                    int req = nums[front] + nums[back];
                    if(req < sum){
                        front++;
                    } else if(req > sum){
                        back--;
                    } else {
                        List<Integer> item = new ArrayList<>();
                        item.add(nums[i]);
                        item.add(nums[j]);
                        item.add(nums[front]);
                        item.add(nums[back]);
                        ans.add(item);

                        while(front < back && nums[front] == item.get(2)){
                            front++;
                        }

                        while(front < back && nums[back] == item.get(3)){
                            back--;
                        }
                    }
                }
                while(j+1<n && nums[j] == nums[j+1]){
                    j++;
                }
            }
            while(i+1<n && nums[i] == nums[i+1]){
                i++;
            }
        }

        return ans;
    }
}

Time complexity: O(N*N*N)
space complexity: O(1)