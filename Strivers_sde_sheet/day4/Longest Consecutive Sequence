https://leetcode.com/problems/longest-consecutive-sequence/

Naive soln:
-----------------------------------------------------------------
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }

        Arrays.sort(nums);
        int max = 1;
        int curr = 1;

        for(int i=1; i<nums.length; i++){
            if(nums[i] != nums[i-1]){
                if(nums[i] == nums[i-1] + 1){
                    curr++;
                } else {
                    curr = 1;
                }
                max = Math.max(max, curr);
            }
        }

        return max;
    }
}

Time complexity: O(NlogN)
space complexity: O(1)
-------------------------------------------------------------------------------
Optimal soln:

class Solution {
    public int longestConsecutive(int[] nums) {
        HashSet<Integer> set = new HashSet<Integer>();
        for(int i : nums){
            set.add(i);
        }

        int longestStreak = 0;

        for(int i=0; i<nums.length; i++){
            if(!set.contains(nums[i] - 1)){
                int curr = nums[i];
                int currentStreak = 1;

                while(set.contains(curr + 1)){
                    currentStreak++;
                    curr = curr + 1;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }

        return longestStreak;
    }
}

Time complexity: O(N) + O(N) + O(N) ~ O(3*N)
space complexity: O(N)
