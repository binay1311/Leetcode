https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1#

Brute-Force soln:
------------------------------------------------------------------------------
class GFG{
    int maxLen(int a[], int n){
        int max = 0;
        for(int i = 0; i < a.length; i++){
       		int sum = 0;
       		for(int j = i; j < a.length; j++){
       			sum += a[j];
       			if(sum == 0){
       				max = Math.max(max, j-i+1);
       			}
       		}
       	}
       	return max;
    }
}

Time complexity: O(N*N)
space complexity: O(1)

Optimal soln:
----------------------------------------------------------------------------------
class GFG{
    int maxLen(int arr[], int n){
        HashMap<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        int max = 0;

        for(int i=0; i<n; i++){
            sum = sum + arr[i];
            if(sum == 0){
                max = i + 1;
            }
            else{
                if(map.containsKey(sum)){
                    max = Math.max(max, i - map.get(sum));
                }else{
                    map.put(sum, i);
                }
            }
        }

        return max;
    }
}

Time complexity: O(N)
space complexity: O(N)

