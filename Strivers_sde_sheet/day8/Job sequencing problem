https://practice.geeksforgeeks.org/problems/job-sequencing-problem-1587115620/1#
https://www.youtube.com/watch?v=LjPx4wQaRIs&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=48

class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        Arrays.sort(arr, (a,b) -> (b.profit - a.profit));

        int max_deadline = 0;
        for(int i=0; i<arr.length; i++){
            max_deadline = Math.max(arr[i].deadline, max_deadline);
        }

        int[] result = new int[max_deadline + 1];

        for(int i=0; i<result.length; i++){
            result[i] = -1;
        }

        int countJobs = 0;
        int profit = 0;

        for(int i=0; i<arr.length; i++){
            for(int j=arr[i].deadline; j>0; j--){
                if(result[j] == -1){
                    result[j] = arr[i].id;
                    countJobs++;
                    profit = profit + arr[i].profit;
                    break;
                }
            }
        }

        int[] ans = new int[2];
        ans[0] = countJobs;
        ans[1] = profit;

        return ans;
    }
}

Time Complexity: O(N log N) + O(N*M)
O(N log N ) for sorting the jobs in decreasing order of profit.
O(N*M) since we are iterating through all N jobs and for every job we are checking from the last deadline,
say M deadlines in the worst case.

Space Complexity: O(M)
O(M) for an array that keeps track on which day which job is performed if
M is the maximum deadline available.