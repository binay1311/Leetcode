https://practice.geeksforgeeks.org/problems/fractional-knapsack-1587115620/1
https://www.youtube.com/watch?v=F_DDzYnxO14&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=51

Optimal soln:
------------------------------------------------------------------------------------------
/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/
class itemComparator implements Comparator<Item>
{
    @Override
    public int compare(Item a, Item b){
        double r1 = (double)(a.value) / (double)(a.weight);
        double r2 = (double)(b.value) / (double)(b.weight);
        if(r1 < r2){
            return 1;
        } else if(r1 > r2){
            return -1;
        }
        return 0;
    }
}

class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        Arrays.sort(arr, new itemComparator());
        int curr_weight = 0;
        double profit = 0.0;

        for(int i=0; i<n; i++){
            if(curr_weight + arr[i].weight < W){
                curr_weight = curr_weight + arr[i].weight;
                profit = profit + arr[i].value;
            } else {
                int req_weight = W - curr_weight;
                profit += (double)(arr[i].value) / (double)(arr[i].weight) * req_weight;
                break;
            }
        }

        return profit;
    }
}

Time complexity: O(N*logN) + O(N)
space complexity: O(1)
