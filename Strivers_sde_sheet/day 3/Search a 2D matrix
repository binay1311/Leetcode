https://leetcode.com/problems/search-a-2d-matrix/

Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

----------------------------------------------------------------------
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        boolean res = false;

        for(int i=0; i<n; i++){
            if(target <= matrix[i][m-1]){
                for(int j=0; j<m; j++){
                    if(matrix[i][j] == target){
                        res = true;
                        break;
                    }
                }
                break;
            }
        }

        return res;
    }
}

Time complexity: O(M) + O(N)
space complexity: O(1)
----------------------------------------------------------------------
Optimal soln

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;

        int low = 0;
        int high = (n * m) - 1;

        while(low <= high){
            int mid = (low + high)/2;
            int row = mid / m;
            int col = mid % m;

            if(matrix[row][col] == target){
                return true;
            } else if(matrix[row][col] < target){
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return false;

    }
}

Time complexity: O(log(M * N))
space complexity: O(1)