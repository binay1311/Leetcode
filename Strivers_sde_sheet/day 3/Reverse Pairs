https://leetcode.com/problems/reverse-pairs/

Brute force:
-------------------------------------------------------------------
class Solution {
    public int reversePairs(int[] nums) {
        int count=0;
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i] > 2 * nums[j]){
                    count++;
                }
            }
        }
        return count;
    }
}

Time complexity: O(N*N)
space complexity: O(1)

-------------------------------------------------------------
Optimal soln:

class Solution {
    public static int merge(int[] nums, int low, int mid, int high){
        int count = 0;
        int j = mid+1;
        for(int i=low; i<=mid; i++){
            while(j <= high && nums[i] > 2 * (long)nums[j]){
                j++;
            }
            count = count + (j - (mid+1));
        }

        int left = low;
        int right = mid+1;
        ArrayList<Integer> list = new ArrayList<>();

        while(left <= mid && right <= high){
            if(nums[left] < nums[right]){
                list.add(nums[left]);
                left++;
            } else {
                list.add(nums[right]);
                right++;
            }
        }

        while(left <= mid){
            list.add(nums[left]);
            left++;
        }

        while(right <= high){
            list.add(nums[right]);
            right++;
        }

        for(int i=low; i<=high; i++){
            nums[i] = list.get(i - low);
        }
        return count;
    }
    public static int mergeSort(int[] nums, int low, int high){
        if(low >= high){
            return 0;
        }
        int mid = (low + high)/2;
        int count = 0;
        count += mergeSort(nums, low, mid);
        count += mergeSort(nums, mid+1, high);
        count += merge(nums, low, mid, high);
        return count;
    }
    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length - 1);
    }
}

Time complexity: O(NlogN)
space complexity: O(N)