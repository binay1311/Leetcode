https://leetcode.com/problems/majority-element/

--------------------------------------------------------
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : nums){
            if(!map.containsKey(i)){
                map.put(i, 1);
            } else {
                map.put(i, map.get(i) + 1);
            }
            if(map.get(i) > (nums.length/2)){
                    return i;
            }
        }
        return 0;
    }
}

Time complexity: O(NlogN)
space complexity: O(N)
--------------------------------------------------------

Optimal soln:

class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        int element = 0;

        for(int i : nums){
            if(count == 0){
                element = i;
            }
            if(element == i){
                count = count + 1;
            } else {
                count = count - 1;
            }
        }
        return element;
    }
}

Time complexity: O(N)
space complexity: O(1)