https://leetcode.com/problems/majority-element-ii/

Optimal soln:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list = new ArrayList<>();
        int c1 = 0;
        int n1 = 0;
        int c2 = 0;
        int n2 = 0;

        for(int i=0; i<nums.length; i++){
            if(n1 == nums[i]){
                c1++;
            } else if(n2 == nums[i]){
                c2++;
            }else if(c1 == 0){
                n1 = nums[i];
                c1++;
            } else if(c2 == 0){
                n2 = nums[i];
                c2++;
            } else {
                c1--;
                c2--;
            }
        }
        c1 = 0;
        c2 = 0;
        for(int i=0; i<nums.length; i++){
            if(nums[i] == n1){
                c1++;
            } else if(nums[i] == n2){
                c2++;
            }
        }

        if(c1 > (nums.length / 3)){
            list.add(n1);
        }
        if(c2 > (nums.length / 3)){
            list.add(n2);
        }

        return list;
    }
}

Time complexity: O(N) + O(N) ~ O(N)
space complexity: O(2)