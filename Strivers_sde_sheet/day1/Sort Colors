https://leetcode.com/problems/sort-colors/

Normal Approach:
----------------------------------------------------------------------
class Solution {
    public void sortColors(int[] nums) {
        int zeros = 0;
        int ones = 0;
        int twos = 0;
        for(int i=0; i<nums.length; i++){
            if(nums[i] == 0){
                zeros = zeros + 1;
            } else if(nums[i] == 1){
                ones = ones + 1;
            } else if(nums[i] == 2){
                twos = twos + 1;
            }
        }

        int count=0;
        for(int i=0; i<zeros; i++){
            nums[count] = 0;
            count++;
        }
        for(int i=0; i<ones; i++){
            nums[count] = 1;
            count++;
        }
        for(int i=0; i<twos; i++){
            nums[count] = 2;
            count++;
        }
    }
}

Time complexity: O(N) + O(N) = O(2N)
space complexity: O(1)

-----------------------------------------------------------------------------
Optimal Soln:

class Solution {
    public void sortColors(int[] nums) {
        int low=0;
        int mid=0;
        int high=nums.length-1;
        int temp;

        while(mid <= high){
            switch(nums[mid]){
                case 0: {
                    temp = nums[low];
                    nums[low] = nums[mid];
                    nums[mid] = temp;
                    low++;
                    mid++;
                    break;
                }
                case 1: {
                    mid++;
                    break;
                }
                case 2: {
                    temp = nums[mid];
                    nums[mid] = nums[high];
                    nums[high] = temp;
                    high--;
                    break;
                }
            }
        }

    }
}

Time complexity: O(N)
space complexity: O(1)