https://leetcode.com/problems/3sum/

Optimal soln:
-------------------------------------------------------------------------------
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        int n = nums.length;
        int target = 0;

        for(int i=0; i<n-2; i++){
            if(i == 0 || nums[i] != nums[i-1]){
                target = 0 - nums[i];
                int a = i+1;
                int b = n-1;

                while(a < b){
                    if(nums[a] + nums[b] == target){
                        res.add(Arrays.asList(nums[i], nums[a], nums[b]));
                        while(a < b && nums[a] == nums[a+1]){
                            a++;
                        }
                        while(a < b && nums[b] == nums[b-1]){
                            b--;
                        }
                        a++;
                        b--;
                    } else if(nums[a] + nums[b] < target){
                        a++;
                    } else {
                        b--;
                    }
                }
            }

        }

        return res;
    }
}

Time complexity: O(N*logN) + O(N * N) =~ O(N*N)
space complexity: O(1)