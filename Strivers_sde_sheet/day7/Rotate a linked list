https://leetcode.com/problems/rotate-list/

Optimal soln:
----------------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        //edge cases
        if(head == null || head.next == null || k == 0)
            return head;

        //compute the length
        ListNode curr = head;
        int count=1;
        while(curr.next != null){
            curr = curr.next;
            count++;
        }

        //go till that node
        curr.next = head;
        k = k % count;
        k = count - k;
        while(k > 1){
            head = head.next;
            k--;
        }

        //make the node head and break the connection
        ListNode temp = head;
        head = head.next;
        temp.next = null;

        return head;
    }
}

Time complexity: O(N) + (N-K) ~= O(N)
space complexity: O(1)
