https://leetcode.com/problems/trapping-rain-water/submissions/

Better soln:
---------------------------------------------------------------------
class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int sum = 0;

        int max = 0;
        for(int i=0; i<n; i++){
            max = Math.max(height[i], max);
            left[i] = max;
        }
        max = 0;
        for(int i=n-1; i>=0; i--){
            max = Math.max(height[i], max);
            right[i] = max;
        }

        for(int i=0; i<n; i++){
            sum = sum + (Math.min(left[i], right[i]) - height[i]);
        }

        return sum;
    }
}

Time complexity: O(N) + O(N) + O(N) = O(3*N) =~ O(N)
space complexity: O(2*N)

Optimal soln:
------------------------------------------------------------------
class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int left = 0;
        int right = n - 1;
        int maxleft = 0;
        int maxright = 0;
        int sum = 0;

        while(left <= right){
            if(height[left] <= height[right]){
                if(height[left] >= maxleft){
                    maxleft = height[left];
                } else {
                    sum = sum + (maxleft - height[left]);
                }
                left++;
            } else {
                if(height[right] >= maxright){
                    maxright = height[right];
                } else {
                    sum = sum + (maxright - height[right]);
                }
                right--;
            }
        }

        return sum;
    }
}

Time complexity: O(N)
space complexity: O(1)
