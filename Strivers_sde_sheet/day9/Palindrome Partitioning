https://leetcode.com/problems/palindrome-partitioning/
https://www.youtube.com/watch?v=WBgsABoClE0&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=52

-------------------------------------------------------------------------------
Optimal soln:

class Solution {
    public void func(String s, int index, List<String> list, List<List<String>> ans){
        if(index == s.length()){
            ans.add(new ArrayList<>(list));
            return;
        }

        for(int i=index; i<s.length(); i++){
            if(isPlaindrome(index, i, s)){
                list.add(s.substring(index, i+1));
                func(s, i+1, list, ans);
                list.remove(list.size() - 1);
            }
        }
    }

    public boolean isPlaindrome(int start, int end, String s){
        while(start <= end){
            if(s.charAt(start) != s.charAt(end)){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> list = new ArrayList<>();
        func(s, 0, list, ans);
        return ans;
    }
}

Time Complexity: O( (2^n) *k*(n/2) )
Reason: O(2^n) to generate every substring and O(n/2)  to check if the substring generated
is a palindrome. O(k) is for inserting the palindromes in another data structure,
where k  is the average length of the palindrome list.

Space Complexity: O(k * x)

Reason: The space complexity can vary depending upon the length of the answer.
k is the average length of the list of palindromes and if we have x such list of palindromes
in our final answer. The depth of the recursion tree is n, so the auxiliary space required
is equal to the O(n).