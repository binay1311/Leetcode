https://practice.geeksforgeeks.org/problems/subset-sums2234/1#
https://www.youtube.com/watch?v=rYkfBRtMJr8&list=PLgUwDviBIf0rGlzIn_7rsaR2FQ5e6ZOL9&index=10

class Solution{
    public static void findSubsetSums
    (ArrayList<Integer> arr, ArrayList<Integer> ans, int sum, int index, int N){
        if(index == N){
            ans.add(sum);
            return;
        }
        
        sum = sum + arr.get(index);
        findSubsetSums(arr, ans, sum, index + 1, N);
        
        sum = sum - arr.get(index);
        findSubsetSums(arr, ans, sum, index + 1, N);
        
    }
    
    ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int N){
        int index = 0;
        int sum = 0;
        ArrayList<Integer> ans = new ArrayList<>();
        
        findSubsetSums(arr, ans, sum, index, N);
        return ans;
    }
}

Time complexity: O(2^N).Each index has two ways. You can either pick it up or not pick it. So for n index time complexity for O(2^n)
Space Complexity: O(2^n) for storing subset sums, since 2^n subsets can be generated for an array of size n.