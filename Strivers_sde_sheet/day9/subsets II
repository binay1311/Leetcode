https://leetcode.com/problems/subsets-ii/
https://www.youtube.com/watch?v=RIn3gOkbhQE&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=54
--------------------------------------------------------------------------------
class Solution {
    public static void findAllSubsets
        (int[] nums, List<List<Integer>> ans, List<Integer> subsets, int index){

        ans.add(new ArrayList<>(subsets));

        for(int i=index; i<nums.length; i++){
            if(index == nums.length){
                return;
            }
            if(i>index && nums[i] == nums[i-1]) continue;

            subsets.add(nums[i]);
            findAllSubsets(nums, ans, subsets, i + 1);

            subsets.remove(subsets.size() - 1);
        }
    }

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> subsets = new ArrayList<>();
        Arrays.sort(nums);

        findAllSubsets(nums, ans, subsets, 0);
        return ans;
    }
}

Time Complexity: O( 2^n *(k log (x) )). 2^n  for generating every subset and k* log( x)  to insert every combination of average length k in a set of size x.
Space Complexity:  O(2^n * k) to store every subset of average length k. Since we are initially using a set to store the answer another O(2^n *k) is also used.