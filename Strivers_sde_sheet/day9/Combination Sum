https://leetcode.com/problems/combination-sum/
https://www.youtube.com/watch?v=OyZFFqQtu98&list=PLgUwDviBIf0rGlzIn_7rsaR2FQ5e6ZOL9&index=8
---------------------------------------------------------
class Solution {
    public static void uniquecombos
    (List<List<Integer>> ans, int[] candidates, int target, List<Integer> combos, int index){
        if(index == candidates.length){
            if(target == 0){
                ans.add(new ArrayList<>(combos));
            }
            return;
        }

        if(candidates[index] <= target){
            target = target - candidates[index];
            combos.add(candidates[index]);
            uniquecombos(ans, candidates, target, combos, index);

            target = target + candidates[index];
            combos.remove(combos.size() - 1);
        }
        uniquecombos(ans, candidates, target, combos, index + 1);
    }

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> combos = new ArrayList<>();
        uniquecombos(ans, candidates, target, combos, 0);
        return ans;
    }
}
Time complexity: O(2^N * k)
space complexity: O(N + k)
