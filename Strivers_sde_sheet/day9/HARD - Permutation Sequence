https://leetcode.com/problems/permutation-sequence/
https://www.youtube.com/watch?v=wT7gcXLYoao&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=56


class Solution {
    public String getPermutation(int n, int k) {
        int fact = 1;
        List<Integer> nums = new ArrayList<>();
        
        for(int i=1; i<n; i++){
            fact = fact * i;
            nums.add(i);
        }
        nums.add(n);
        k = k - 1;
        String ans = "";
        
        while(true){
            ans = ans + nums.get(k / fact);
            nums.remove(k / fact);
            
            if(nums.size() == 0){
                break;
            }
            
            k = k % fact;
            fact = fact / nums.size();
        }
        return ans;
    }
}

Time Complexity: O(N) * O(N) = O(N^2)
Reason: We are placing N numbers in N positions. This will take O(N) time.
For every number, we are reducing the search space by removing the element already placed in the
 previous step. This takes another O(N) time.

Space Complexity: O(N)
Reason: We are storing  the numbers in a data structure.