https://leetcode.com/problems/top-k-frequent-elements/
https://www.youtube.com/watch?v=7VoJn544QrM&list=PL_z_8CaSLPWdtY9W22VjnPxG30CXNZpI9&index=6

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int[] arr = new int[k];
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        PriorityQueue<Map.Entry<Integer, Integer>> minheap = new PriorityQueue<>(
            (a,b) -> a.getValue() - b.getValue());

        for(int i=0; i<nums.length; i++){
            if(map.containsKey(nums[i])){
                int val = map.get(nums[i]);
                map.put(nums[i],val + 1);
            } else {
                map.put(nums[i], 1);
            }
        }

        for (Map.Entry<Integer, Integer> item : map.entrySet()) {
            minheap.add(item);
            if(minheap.size() > k){
                minheap.poll();
            }
        }

        int count = 0;
        while(minheap.size() != 0){
            arr[count] = minheap.poll().getKey();
            count++;
        }

        return arr;
    }
}